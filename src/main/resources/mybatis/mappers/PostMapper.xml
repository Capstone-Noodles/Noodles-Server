<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="capston.noodles.Post.mapper.PostMapper">

    <select id="getAllPostInfo" parameterType = "map" resultType="AllPostResponse">

        set @location = POINT(#{longitude}, #{latitude});
        select p.postIdx, u.userIdx, u.identification, u.nickname, u.profileImage, group_concat(pi.image) postImageList, p.location, p.content,
        (case
        when <![CDATA[st_distance_sphere(@location, POINT(p.longitude, p.latitude)) < 1000]]>
        then concat(format(st_distance_sphere(@location, POINT(p.longitude, p.latitude)), 2), 'm')
        else
        concat(format(st_distance_sphere(@location, POINT(p.longitude, p.latitude)) * 0.001 , 2), 'km')
        end) as distance,
        (select count(*)
        from PostLike) as likes,
        (case x.likeCnt
        when 1 then 1
        else 0
        end) as isliked,
        (case y.bookmark
        when 1 then 1
        else 0
        end) as isBookmarked
        from Post p
        join UserInfo u on p.userIdx = u.userIdx
        join PostImage pi on p.postIdx = pi.postIdx
        left join (select count(*) likeCnt, pl.postIdx
                    from PostLike pl
                    where pl.userIdx = #{userIdx}
                    and pl.status = 'Y'
                    ) x on x.postIdx = p.postIdx
        left join (select count(*) bookmark, b.postIdx
                    from Bookmark b
                    where b.userIdx = #{userIdx}
                    and b.status = 'Y'
                    ) y on y.postIdx = p.postIdx
        where <![CDATA[st_distance_sphere(@location, POINT(p.longitude, p.latitude)) < 20000]]>
        and p.status = 'Y'
        group by p.postIdx
        order by st_distance_sphere(@location, POINT(p.longitude, p.latitude));
    </select>

    <select id="getOnePostInfo" parameterType = "long" resultType="OnePostResponse">
        select date_format(P.createdAt, '%Y-%m-%d %T') as createdAt, P.location, P.latitude, P.longitude, P.content,
               (select nickname from UserInfo UI where P.userIdx = UI.userIdx) as nickname,
               (select profileImage from UserInfo UI where P.userIdx = UI.userIdx) as profilImg
        from Post P
        where postIdx = #{postIdx};
    </select>

    <insert id="postPost" parameterType = "capston.noodles.Post.model.entity.dto.TotalUploadPostDto" useGeneratedKeys="true" keyProperty="postIdx">
        insert into Post(location, latitude, longitude, content, userIdx)
        values(#{location}, #{latitude}, #{longitude}, #{content}, #{userIdx});
    </insert>

    <insert id="insertImage" parameterType="map" useGeneratedKeys="true" keyProperty="postImageIdx">
        insert into PostImage(postImageIdx, image, postIdx)
        values (#{postImageIdx}, #{image}, #{postIdx});
    </insert>

    <update id="deletePost" parameterType="long">
        update Post
        set status = 'N'
        where postIdx = #{postIdx};
    </update>
</mapper>